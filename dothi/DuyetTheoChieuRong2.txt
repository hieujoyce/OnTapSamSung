#include <iostream>
#include <queue>

using namespace std;

void bfs(int visited[], int index, int ** arr, int n, int parents[]) {
    queue<int> q;
    q.push(index);
    visited[index] = 1;
    while(!q.empty()) {
        int v = q.front();
        q.pop();
        for(int i = 0; i < n; i++) {
            if(arr[v][i] == 1 && index != i && visited[i] == 0) {
                parents[i] = v;
                q.push(i);
                visited[i] = 1;
            }
        }
    }
}

int main() {
    int t;
    cin >> t;
    for(int k = 0; k < t; k++) {
        int n, u, v;
        cin >> n >> u >> v;
        int **arr = new int*[n];
        for(int i = 0; i < n; i++) {
            arr[i] = new int[n];
            for(int j = 0; j < n; j++) {
                cin >> arr[i][j];
            }
        }
        int visited[n], parents[n], first = 1;
        for(int j = 0; j < n; j++) {
            visited[j] = 0;
        }
        bfs(visited, u, arr, n, parents);
        printf("Path from %d to %d:", u, v);
        if(visited[v] == 0) {
            printf(" No path exits");
        } else {
            vector<int> path;
            int tmp = v;
            while(u != tmp) {
                path.push_back(tmp);
                tmp = parents[tmp];
            }
            path.push_back(u);
            for (int i = path.size() - 1; i >= 0; i--) {
                if(first == 1) {
                    first = 0;
                } else {
                    printf(" -->"); 
                }
                printf(" %d", path[i]);
            }
        }
        cout << endl;
    }

    return 0;
}